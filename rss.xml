<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>worked warriors</title>
        <link>http://example.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Tue, 28 May 2024 09:12:48 +0800</pubDate>
        <lastBuildDate>Tue, 28 May 2024 09:12:48 +0800</lastBuildDate>
        <category>vue,学习,面经</category>
        <category>面经</category>
        <item>
            <guid isPermalink="true">http://example.com/2024/05/28/vue%E7%B3%BB%E5%88%97/</guid>
            <title>vue系列</title>
            <link>http://example.com/2024/05/28/vue%E7%B3%BB%E5%88%97/</link>
            <pubDate>Tue, 28 May 2024 09:12:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;vue相关面试问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue相关面试问题&#34;&gt;#&lt;/a&gt; vue 相关面试问题&lt;/h1&gt;
&lt;h2 id=&#34;vue的生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue的生命周期&#34;&gt;#&lt;/a&gt; vue 的生命周期&lt;/h2&gt;
&lt;p&gt;​	Vue 生命周期总共可以分为 8 个阶段&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;beforeCreate&lt;/th&gt;
&lt;th&gt;组件实例被创建之初&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;created&lt;/td&gt;
&lt;td&gt;组件实例已经完全创建&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;beforeMount&lt;/td&gt;
&lt;td&gt;组件挂载之前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mounted&lt;/td&gt;
&lt;td&gt;组件挂载到实例上去之后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;beforeUpdate&lt;/td&gt;
&lt;td&gt;组件数据发生变化，更新之前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updated&lt;/td&gt;
&lt;td&gt;组件数据更新之后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;beforeDestroy&lt;/td&gt;
&lt;td&gt;组件实例销毁之前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;destroyed&lt;/td&gt;
&lt;td&gt;组件实例销毁之后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;activated&lt;/td&gt;
&lt;td&gt;keep-alive 缓存的组件激活时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deactivated&lt;/td&gt;
&lt;td&gt;keep-alive 缓存的组件停用时调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;errorCaptured&lt;/td&gt;
&lt;td&gt;捕获一个来自子孙组件的错误时被调用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在 vue2 和 vue3 中的生命周期钩子函数有所不同：&lt;/p&gt;
&lt;p&gt;​	vue3 中多了 setup 生命周期，所以 vue3 中的 created 和 beforecreate 换成了 setup，销毁换成了 onBeforeUnmount 和 onUnmounted。此外被包含在 &amp;lt;keep-alive&amp;gt; 中的组件，会多出两个生命周期钩子函数，被激活时执行 onActivated ，停用时执行 deactivated。&lt;/p&gt;
&lt;h2 id=&#34;vue的响应式原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue的响应式原理&#34;&gt;#&lt;/a&gt; vue 的响应式原理&lt;/h2&gt;
&lt;p&gt;​	在 vue2，和 vue3 中响应式原理时不同的。在 vue2 中使用的是 object.defineProperty 进行数据劫持的。&lt;/p&gt;
&lt;h3 id=&#34;方法1objectdefineproperty实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法1objectdefineproperty实现&#34;&gt;#&lt;/a&gt; 方法 1.Object.defineProperty 实现&lt;/h3&gt;
&lt;p&gt;给数据赋予 &lt;code&gt;getter&lt;/code&gt;  和 &lt;code&gt;setter&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; middle = &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;defineProperty&lt;/span&gt;(data,&lt;span class=&#34;string&#34;&gt;&amp;#x27;age&amp;#x27;&lt;/span&gt;,&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;获取age&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; middle&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;parmas&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//参数就是赋值的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;修改age数据&amp;#x27;&lt;/span&gt;,parmas)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    middle = parmas&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 取值的时候触发getter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(data.&lt;span class=&#34;property&#34;&gt;age&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//赋值的时候触发setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data.&lt;span class=&#34;property&#34;&gt;age&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(data.&lt;span class=&#34;property&#34;&gt;age&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而每个 setter 方法就是一个观察者，在数据变更的时候通知订阅者更新视图。当数据发生变化时页面上的数据会实时改变，更新页面。但这种方法&lt;strong&gt;无法检测到对象属性的添加或删除&lt;/strong&gt; (如 &lt;code&gt;data.location.a=1&lt;/code&gt; )； &lt;code&gt;getter/setter&lt;/code&gt;  只能追踪一个数据是否被修改，无法追踪新增属性和删除属性。所以 ** &lt;code&gt;Object.defineProperty&lt;/code&gt;  不能监听数组的变化，需要进行数组方法的重写 **&lt;/p&gt;
&lt;h3 id=&#34;方法2proxy实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法2proxy实现&#34;&gt;#&lt;/a&gt; 方法 2.Proxy 实现&lt;/h3&gt;
&lt;p&gt;​	 &lt;code&gt;Proxy&lt;/code&gt;  是 JavaScript 2015 的一个新特性。&lt;strong&gt; &lt;code&gt;Proxy&lt;/code&gt;  的代理是针对整个对象的，而不是对象的某个属性&lt;/strong&gt;， &lt;code&gt;Proxy&lt;/code&gt;  只需要做一层代理就可以监听同级结构下的所有属性变化，当然对于深层结构，递归还是需要进行的。此外 ** &lt;code&gt;Proxy&lt;/code&gt;  支持代理数组的变化。**&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;模拟视图的更新&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;前端工匠&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;age&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;arr&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; handler = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;target, key&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 如果取的值是对象就在对这个对象进行数据劫持&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; target[key] == &lt;span class=&#34;string&#34;&gt;&amp;#x27;object&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; target[key] !== &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Proxy&lt;/span&gt;(target[key], handler)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(target, key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;target, key, value&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (key === &lt;span class=&#34;string&#34;&gt;&amp;#x27;length&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;render&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(target, key, value)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; proxy = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Proxy&lt;/span&gt;(obj, handler)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;proxy.&lt;span class=&#34;property&#34;&gt;age&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;name&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;浪里行舟&amp;#x27;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 支持新增属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(proxy.&lt;span class=&#34;property&#34;&gt;age&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;name&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 模拟视图的更新 浪里行舟&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;proxy.&lt;span class=&#34;property&#34;&gt;arr&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;浪里行舟&amp;#x27;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//支持数组的内容发生变化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(proxy.&lt;span class=&#34;property&#34;&gt;arr&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 模拟视图的更新 [&amp;#x27;浪里行舟&amp;#x27;, 2, 3 ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;proxy.&lt;span class=&#34;property&#34;&gt;arr&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;-- &lt;span class=&#34;comment&#34;&gt;// 无效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;getter 用来收集依赖 setter 用来监听变换改变视图。收集完依赖需要为依赖找一个存储依赖的地方，为此我们创建了 Dep, 它用来收集依赖、删除依赖和向依赖发送消息等。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Dep&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt; () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;/* 用来存放Watcher对象的数组 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;subs&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 在subs中添加一个Watcher对象 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    addSub (sub) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;subs&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(sub);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 通知所有Watcher对象更新视图 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    notify () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;subs&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;sub&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sub.&lt;span class=&#34;title function_&#34;&gt;update&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;vue实现双向绑定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue实现双向绑定&#34;&gt;#&lt;/a&gt; vue 实现双向绑定&lt;/h2&gt;
&lt;p&gt;vue 实现双向绑定是基于数据响应式。通过 &lt;code&gt;Object.defineProperty()&lt;/code&gt;  来劫持各个属性的 &lt;code&gt;setter， getter&lt;/code&gt; ，在数据发生变动时通知 Vue 实例，触发相应的 getter 和 setter 回调函数。vue 中的 v-model 是 v-on 和 v-bind 的语法糖。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;input v-model=&lt;span class=&#34;string&#34;&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;!-- 上面的代码等价于 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;:value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt; @&lt;span class=&#34;attr&#34;&gt;input&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;xxx = $event.target.value&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 双向绑定 = 单向绑定 + UI事件监听 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;:value 实现单向绑定，@input 绑定事件从而实现双向绑定&lt;/p&gt;
&lt;p&gt;要实现一个完整的双向绑定需要以下几个要点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用 &lt;code&gt;Proxy&lt;/code&gt;  或 &lt;code&gt;Object.defineProperty&lt;/code&gt;  生成的 &lt;code&gt;Observer&lt;/code&gt;  针对对象 / 对象的属性进行 &amp;quot;劫持&amp;quot;, 在属性发生变化后通知订阅者&lt;/li&gt;
&lt;li&gt;解析器 &lt;code&gt;Compile&lt;/code&gt;  解析模板中的 &lt;code&gt;Directive&lt;/code&gt;  (指令)，收集指令所依赖的方法和数据，等待数据变化然后进行渲染&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Watcher&lt;/code&gt;  属于 &lt;code&gt;Observer&lt;/code&gt;  和 &lt;code&gt;Compile&lt;/code&gt;  桥梁，它将接收到的 &lt;code&gt;Observer&lt;/code&gt;  产生的数据变化，并根据 &lt;code&gt;Compile&lt;/code&gt;  提供的指令进行视图渲染，使得数据变化促使视图变化&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;vue如何解决跨域问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue如何解决跨域问题&#34;&gt;#&lt;/a&gt; vue 如何解决跨域问题&lt;/h2&gt;
&lt;p&gt;跨域本质是浏览器基于&lt;strong&gt;同源策略&lt;/strong&gt;的一种安全手段&lt;/p&gt;
&lt;p&gt;所谓同源（即指在同一个域）具有以下三个相同点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;协议相同（protocol）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机相同（host）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;端口相同（port）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案一 (proxy 代理)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果是通过 &lt;code&gt;vue-cli&lt;/code&gt;  脚手架工具搭建项目，我们可以通过 &lt;code&gt;webpack&lt;/code&gt;  为我们起一个本地服务器作为请求的代理对象&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;vue.config.js&lt;/code&gt;  文件，新增以下代码&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;amodule.&lt;span class=&#34;property&#34;&gt;exports&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;devServer&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;host&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;127.0.0.1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;port&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;8084&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;open&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;span class=&#34;comment&#34;&gt;// vue项目启动时自动打开浏览器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;proxy&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;/api&amp;#x27;&lt;/span&gt;: &amp;#123; &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;/api&amp;#x27;是代理标识，用于告诉node，url前面是/api的就是使用代理的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;target&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;http://xxx.xxx.xx.xx:8080&amp;quot;&lt;/span&gt;, &lt;span class=&#34;comment&#34;&gt;//目标地址，一般是指后台服务器地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;changeOrigin&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;comment&#34;&gt;//是否跨域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;pathRewrite&lt;/span&gt;: &amp;#123; &lt;span class=&#34;comment&#34;&gt;// pathRewrite 的作用是把实际Request Url中的&amp;#x27;/api&amp;#x27;用&amp;quot;&amp;quot;代替&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;string&#34;&gt;&amp;#x27;^/api&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果是生产环境可以配置 nginx 的代理和上述方式类似&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    listen    &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # server_name www.&lt;span class=&#34;property&#34;&gt;josephxia&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;com&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        root  /&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt;/www/html;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        index  index.&lt;span class=&#34;property&#34;&gt;html&lt;/span&gt; index.&lt;span class=&#34;property&#34;&gt;htm&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        try_files $uri $uri/ /index.&lt;span class=&#34;property&#34;&gt;html&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    location /api &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        proxy_pass  &lt;span class=&#34;attr&#34;&gt;http&lt;/span&gt;:&lt;span class=&#34;comment&#34;&gt;//127.0.0.1:3000;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        proxy_redirect   off;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        proxy_set_header  &lt;span class=&#34;title class_&#34;&gt;Host&lt;/span&gt;       $host;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        proxy_set_header  X-&lt;span class=&#34;title class_&#34;&gt;Real&lt;/span&gt;-&lt;span class=&#34;variable constant_&#34;&gt;IP&lt;/span&gt;     $remote_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        proxy_set_header  X-&lt;span class=&#34;title class_&#34;&gt;Forwarded&lt;/span&gt;-&lt;span class=&#34;title class_&#34;&gt;For&lt;/span&gt;  $proxy_add_x_forwarded_for;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案二 (CORS)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它由一系列传输的 HTTP 头组成，这些 HTTP 头决定浏览器是否阻止前端 JavaScript 代码获取跨域请求的响应&lt;/p&gt;
&lt;p&gt;后端在接受前端请求后先前端发送数据时在 http 请求头中直接设置 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;  响应头如：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;app.&lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; (ctx, next)=&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ctx.&lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Access-Control-Allow-Origin&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ctx.&lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Access-Control-Allow-Headers&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ctx.&lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Access-Control-Allow-Methods&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;PUT, POST, GET, DELETE, OPTIONS&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ctx.&lt;span class=&#34;property&#34;&gt;method&lt;/span&gt; == &lt;span class=&#34;string&#34;&gt;&amp;#x27;OPTIONS&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ctx.&lt;span class=&#34;property&#34;&gt;body&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案三 (JSONP)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事先定义一个用于获取跨域响应数据的回调函数，并通过没有同源策略限制的 &lt;code&gt;script&lt;/code&gt;  标签发起一个请求（将回调函数的名称放到这个请求的 &lt;code&gt;query&lt;/code&gt;  参数里），然后服务端返回这个回调函数的执行，并将需要响应的数据放到回调函数的参数里，&lt;/p&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;它不像 &lt;code&gt;XMLHttpRequest&lt;/code&gt;  对象实现的 &lt;code&gt;Ajax&lt;/code&gt;  请求那样受到同源策略的限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;它的兼容性更好，在更加古老的浏览器中都可以运行，不需要 &lt;code&gt;XMLHttpRequest&lt;/code&gt;  或 &lt;code&gt;ActiveX&lt;/code&gt;  的支持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并且在请求完毕后可以通过调用 &lt;code&gt;callback&lt;/code&gt;  的方式回传结果&lt;/p&gt;
&lt;p&gt;用 jsonp 的好处是可以单独让一个 http 请求跨域&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;​	它&lt;strong&gt;只支持 &lt;code&gt;GET&lt;/code&gt;  请求&lt;/strong&gt;而不支持  &lt;code&gt;POST&lt;/code&gt;  等其它类型的 HTTP 请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vue的diff算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue的diff算法&#34;&gt;#&lt;/a&gt; vue 的 diff 算法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;diff&lt;/code&gt;  算法是一种通过同层的树节点进行比较的高效算法&lt;/p&gt;
&lt;p&gt;其有两个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;比较只会在同层级进行，不会跨层级比较&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 diff 比较的过程中，循环从两边向中间比较&lt;/p&gt;
&lt;p&gt;当数据发生改变时， &lt;code&gt;set&lt;/code&gt;  方法会调用 &lt;code&gt;Dep.notify&lt;/code&gt;  通知所有订阅者 &lt;code&gt;Watcher&lt;/code&gt; ，订阅者就会调用 &lt;code&gt;patch&lt;/code&gt;  给真实的 &lt;code&gt;DOM&lt;/code&gt;  打补丁，更新相应的视图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当数据发生改变时，订阅者 &lt;code&gt;watcher&lt;/code&gt;  就会调用 &lt;code&gt;patch&lt;/code&gt;  给真实的 &lt;code&gt;DOM&lt;/code&gt;  打补丁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;isSameVnode&lt;/code&gt;  进行判断，相同则调用 &lt;code&gt;patchVnode&lt;/code&gt;  方法&lt;/p&gt;
&lt;p&gt;patchVnode 做了以下操作：&lt;/p&gt;
&lt;p&gt;找到对应的真实 &lt;code&gt;dom&lt;/code&gt; ，称为 &lt;code&gt;el&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果都有都有文本节点且不相等，将 &lt;code&gt;el&lt;/code&gt;  文本节点设置为 &lt;code&gt;Vnode&lt;/code&gt;  的文本节点&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;oldVnode&lt;/code&gt;  有子节点而 &lt;code&gt;VNode&lt;/code&gt;  没有，则删除 &lt;code&gt;el&lt;/code&gt;  子节点&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;oldVnode&lt;/code&gt;  没有子节点而 &lt;code&gt;VNode&lt;/code&gt;  有，则将 &lt;code&gt;VNode&lt;/code&gt;  的子节点真实化后添加到 &lt;code&gt;el&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果两者都有子节点，则执行 &lt;code&gt;updateChildren&lt;/code&gt;  函数比较子节点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;updateChildren 主要做了以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设置新旧 &lt;code&gt;VNode&lt;/code&gt;  的头尾指针&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新旧头尾指针进行比较，循环向中间靠拢，根据情况调用 &lt;code&gt;patchVnode&lt;/code&gt;  进行 &lt;code&gt;patch&lt;/code&gt;  重复流程、调用 &lt;code&gt;createElem&lt;/code&gt;  创建一个新节点，从哈希表寻找  &lt;code&gt;key&lt;/code&gt;  一致的 &lt;code&gt;VNode&lt;/code&gt;  节点再分情况操作&lt;/p&gt;
&lt;p&gt;&lt;code&gt;diff&lt;/code&gt;  算法是一种通过同层的树节点进行比较的高效算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vue2和vue3的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue2和vue3的区别&#34;&gt;#&lt;/a&gt; vue2 和 vue3 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;响应式原理 api 的改变&lt;br /&gt;
 Vue2 响应式原理采用的是 defineProperty，而 vue3 选用的是 proxy。这两者前者是修改对象属性的权限标签，后者是代理整个对象。性能上 proxy 会更加优秀。&lt;/li&gt;
&lt;li&gt;diff 算法，渲染算法的改变&lt;br /&gt;
 Vue3 优化 diff 算法。不再像 vue2 那样比对所有 dom，而采用了 block tree 的做法。此外重新渲染的算法里也做了改进，利用了闭包来进行缓存。这使得 vue3 的速度比 vue2 快了 6 倍。&lt;/li&gt;
&lt;li&gt;建立数据 data&lt;br /&gt;
 这里就是 Vue2 与 Vue3 最大的区别 — Vue2 使用 &lt;code&gt;选项类型API（Options API）&lt;/code&gt; 对比 Vue3 &lt;code&gt;合成型API（Composition API）&lt;/code&gt;  旧的选项型 API 在代码里分割了不同的属性（properties）：data，computed 属性，methods，等等。新的合成型 API 能让我们用方法（function）来分割，相比于旧的 API 使用属性来分组，这样代码会更加简便和整洁。&lt;/li&gt;
&lt;li&gt;**Diff 算法重写：** 新增了最长递归子序列的&lt;a href=&#34;https://so.csdn.net/so/search?q=%E7%AE%97%E6%B3%95&amp;amp;spm=1001.2101.3001.7020&#34;&gt;算法&lt;/a&gt;，来计算出最小的修改偏移量。还增加了静态标记&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v-show与v-if的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#v-show与v-if的区别&#34;&gt;#&lt;/a&gt; v-show 与 v-if 的区别&lt;/h2&gt;
&lt;p&gt;控制手段： &lt;code&gt;v-show&lt;/code&gt;  隐藏则是为该元素添加 &lt;code&gt;css--display:none&lt;/code&gt; ， &lt;code&gt;dom&lt;/code&gt;  元素依旧还在。 &lt;code&gt;v-if&lt;/code&gt;  显示隐藏是将 &lt;code&gt;dom&lt;/code&gt;  元素整个添加或删除&lt;/p&gt;
&lt;p&gt;编译过程： &lt;code&gt;v-if&lt;/code&gt;  切换有一个局部编译 / 卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件； &lt;code&gt;v-show&lt;/code&gt;  只是简单的基于 css 切换&lt;/p&gt;
&lt;p&gt;v-show 有 &lt;code&gt;transition&lt;/code&gt;  就执行 &lt;code&gt;transition&lt;/code&gt; ，没有就直接设置 &lt;code&gt;display&lt;/code&gt;  属性&lt;/p&gt;
&lt;p&gt;返回一个 &lt;code&gt;node&lt;/code&gt;  节点， &lt;code&gt;render&lt;/code&gt;  函数通过表达式的值来决定是否生成 &lt;code&gt;DOM&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;前端性能优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端性能优化&#34;&gt;#&lt;/a&gt; 前端性能优化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;减少HTTP请求&lt;/code&gt; &lt;br /&gt;
如 Chrome 浏览器最多同时允许对同一个域名 Host 建立 6 个 TCP 连接，不同的浏览器有所区别，减少 http 请求也就是减少我们 html 里 css/js 等资源的数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;设置浏览器缓存策略&lt;/code&gt; 主要为设置缓存策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;强制缓存：当 web 应用获取资源时，先从 本地 获取，如果有就直接用。强制缓存涉及到的头字段有  &lt;code&gt;Expires&lt;/code&gt; （http1.0）和 &lt;code&gt;Cache-Control&lt;/code&gt;  (http1.1)，由服务端设置.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expires 接受一个 GMT 格式时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;Expires&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Wed&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt; Oct &lt;span class=&#34;token number&#34;&gt;2015&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;GMT&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;code￼&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;createElement&lt;/code&gt;  创建  &lt;code&gt;VNode&lt;/code&gt;  的过程，每个  &lt;code&gt;VNode&lt;/code&gt;  有  &lt;code&gt;children&lt;/code&gt; ， &lt;code&gt;children&lt;/code&gt;  每个元素也是一个 &lt;code&gt;VNode&lt;/code&gt; ，这样就形成了一个虚拟树结构，用于描述真实的 &lt;code&gt;DOM&lt;/code&gt;  树结构&lt;/p&gt;
&lt;h2 id=&#34;组件间通信的方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组件间通信的方案&#34;&gt;#&lt;/a&gt; 组件间通信的方案&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过 props 传递&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适用场景：父组件传递数据给子组件&lt;/li&gt;
&lt;li&gt;子组件设置 &lt;code&gt;props&lt;/code&gt;  属性，定义接收父组件传递过来的参数，父组件在使用子组件标签中通过字面量来传递值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 $emit 触发自定义事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适用场景：子组件传递数据给父组件&lt;/li&gt;
&lt;li&gt;子组件通过 &lt;code&gt;$emit触发&lt;/code&gt; 自定义事件， &lt;code&gt;$emit&lt;/code&gt;  第二个参数为传递的数值，父组件绑定监听器获取到子组件传递过来的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EventBus&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用场景：兄弟组件传值&lt;/li&gt;
&lt;li&gt;创建一个中央事件总线 &lt;code&gt;EventBus&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;兄弟组件通过 &lt;code&gt;$emit&lt;/code&gt;  触发自定义事件， &lt;code&gt;$emit&lt;/code&gt;  第二个参数为传递的数值，另一个兄弟组件通过 &lt;code&gt;$on&lt;/code&gt;  监听自定义事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide 与 Inject&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在祖先组件定义 &lt;code&gt;provide&lt;/code&gt;  属性，返回传递的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在后代组件通过 &lt;code&gt;inject&lt;/code&gt;  接收组件传递过来的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;provide&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token literal-property property&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;foo&#39;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;inject&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 获取到祖先组件传递过来的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vuex&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;vue中key的原理吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue中key的原理吗&#34;&gt;#&lt;/a&gt; vue 中 key 的原理吗&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;当我们在使用 &lt;code&gt;v-for&lt;/code&gt;  时，需要给单元加上 &lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;v-for&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;item in items&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;:key&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;item.id&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用 &lt;code&gt;+new Date()&lt;/code&gt;  生成的时间戳作为 &lt;code&gt;key&lt;/code&gt; ，手动强制触发重新渲染&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Comp&lt;/span&gt; :key=&lt;span class=&#34;string&#34;&gt;&amp;quot;+new Date()&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在不使用 &lt;code&gt;key&lt;/code&gt;  的情况，vue 会原地复用修改 DOM 值增加 DOM 操作&lt;/p&gt;
&lt;p&gt;设置 key 值不一定能提高 diff 效率。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2024/05/27/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/</guid>
            <title>腾讯一面</title>
            <link>http://example.com/2024/05/27/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/</link>
            <pubDate>Mon, 27 May 2024 09:12:48 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;1. 有了解过哪些前端框架&lt;br /&gt;
 2.vue 和 react 有什么区别&lt;br /&gt;
 3.vue 可以实现交互吗&lt;br /&gt;
 4. 项目中有哪些状态信息管理（回答 pinia 管理登录信息和 token 令牌）&lt;br /&gt;
5. 单页和多页的区别&lt;br /&gt;
 6. 单页的优点&lt;br /&gt;
 7. 单页的缺点（数据加载多）&lt;br /&gt;
8. 如何解决这个问题（webpack，代码的复用，隐藏一些不可见元素）&lt;br /&gt;
9. 路由的实现，用的什么模式，history 模式&lt;br /&gt;
 10. 场景题&lt;br /&gt;
前端发送 500000 个数据给后端会有什么问题（服务器压力过大，数据访问出错）&lt;br /&gt;
如何解决&lt;br /&gt;
（用 promise 对象发送几个请求）&lt;br /&gt;
了解 promise.all 吗&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
