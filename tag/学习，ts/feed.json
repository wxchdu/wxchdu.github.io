{
    "version": "https://jsonfeed.org/version/1",
    "title": "worked warriors • All posts by \"学习，ts\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/05/29/TS%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/",
            "url": "http://example.com/2024/05/29/TS%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/",
            "title": "TS学习记录",
            "date_published": "2024-05-29T01:12:48.000Z",
            "content_html": "<h1 id=\"typescript的内置数据类型有哪些\"><a class=\"anchor\" href=\"#typescript的内置数据类型有哪些\">#</a> TypeScript 的内置数据类型有哪些？</h1>\n<p>在 Typescript 中，内置的数据类型也称为原始数据类型。</p>\n<p>boolean（布尔类型）</p>\n<p>number（数字类型）</p>\n<p>string（字符串类型）</p>\n<p>void 类型</p>\n<p>null 和 undefined 类型</p>\n<p>array（数组类型）</p>\n<p>tuple（元组类型）：允许表示一个已知元素数量和类型的数组，各元素的类型不必相同</p>\n<p>enum（枚举类型）： <code>enum</code>  类型是对 JavaScript 标准数据类型的一个补充，使用枚举类型可以为一组数值赋予友好的名字</p>\n<p>any（任意类型）</p>\n<p>never 类型</p>\n<p>object 对象类型</p>\n<p>unknown 是一个类型安全的 any，不能直接赋值给其他类型的变量，如果要赋值需要先做判断，或者使用断言</p>\n<p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:<span class=\"built_in\">unknown</span>;</span><br><span class=\"line\">a=<span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">b = a <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>;</span><br></pre></td></tr></table></figure></p>\n<p>void 表示返回空，可以返回 null 或 undefined，never 表示没有返回值，null 和 undefined 也不能返回</p>\n<p>object 表示对象类型但经常是指定对象类型的如</p>\n<p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a : &#123;<span class=\"attr\">name</span>:<span class=\"built_in\">string</span>&#125;;</span><br><span class=\"line\">a=&#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;xunwukong&quot;</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果想定义多个属性名可以：</p>\n<p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>:&#123;<span class=\"attr\">name</span>:<span class=\"built_in\">string</span>,[<span class=\"attr\">prop</span>:<span class=\"built_in\">string</span>]:<span class=\"built_in\">string</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b=&#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;zhubaje&quot;</span>,<span class=\"attr\">gendle</span>:<span class=\"string\">&quot;nan&quot;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&quot;18&quot;</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>prop:string 表示属性名的类型，：sting 表示属性值的类型。</p>\n<p>同样，还可以定义函数：</p>\n<p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> c : <span class=\"function\">(<span class=\"params\">a:<span class=\"built_in\">number</span>,b:<span class=\"built_in\">number</span></span>)=&gt;</span><span class=\"built_in\">number</span>;</span><br><span class=\"line\">c = <span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>也可以定义数组：</p>\n<p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> d : <span class=\"built_in\">string</span>[];</span><br></pre></td></tr></table></figure></p>\n<p>tuple 表示固定类型和长度的数组，类型和长度不能变</p>\n<p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> e : [<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">e = [<span class=\"string\">&quot;hello&quot;</span>,<span class=\"number\">123</span>];</span><br></pre></td></tr></table></figure></p>\n<p>enum 表示枚举类型，用于赋予友好的名字</p>\n<p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Gneder</span>&#123;</span><br><span class=\"line\">  male=<span class=\"number\">0</span>,</span><br><span class=\"line\">  female=<span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> f : &#123;<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>,<span class=\"attr\">gender</span>:<span class=\"title class_\">Gneder</span>&#125;;</span><br><span class=\"line\">f = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;xunwukong&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"title class_\">Gneder</span>.<span class=\"property\">male</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>类型可以起别名用于简化</p>\n<p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> myType = <span class=\"number\">1</span>|<span class=\"number\">2</span>|<span class=\"number\">3</span>|<span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">g</span>:myType;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"ts的配置文件\"><a class=\"anchor\" href=\"#ts的配置文件\">#</a> ts 的配置文件</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>如果一个目录下存在一个 <code>tsconfig.json</code>  文件，那么它意味着这个目录是 TypeScript 项目的根目录。  <code>tsconfig.json</code>  文件中指定了用来编译这个项目的根文件和编译选项。 一个项目可以通过以下方式之一来编译：</p>\n<ul>\n<li>\n<p>使用 <code>&quot;include&quot;</code>  和 <code>&quot;exclude&quot;</code>  属性</p>\n<p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;outDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./built&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;allowJs&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es5&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;./src/**/*&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<p>include 用来包含那些文件 ** 表示任意目录，* 表示任意文件</p>\n<p>compilerOptions 表示编译选项</p>\n<p>有很多</p>\n<p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;incremental&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度</span></span><br><span class=\"line\"><span class=\"attr\">&quot;tsBuildInfoFile&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./buildFile&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 增量编译文件的存储位置</span></span><br><span class=\"line\"><span class=\"attr\">&quot;diagnostics&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 打印诊断信息 </span></span><br><span class=\"line\"><span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ES5&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 目标语言的版本</span></span><br><span class=\"line\"><span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CommonJS&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 生成代码的模板标准</span></span><br><span class=\"line\">                 <span class=\"comment\">// 默认值 target === &quot;es3&quot; or &quot;es5&quot; ?&quot;commonjs&quot; : &quot;es6&quot;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;outFile&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./app.js&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，</span></span><br><span class=\"line\">                      <span class=\"comment\">// 即开启时应设置&quot;module&quot;: &quot;AMD&quot;,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 编译时引入的 ES 功能库，包括：es5 、es6、es7、dom 等。// 如果未设置，则默认为： target 为 es5 时: [&quot;dom&quot;, &quot;es5&quot;, &quot;scripthost&quot;] </span></span><br><span class=\"line\"><span class=\"comment\">//target 为 es6 时: [&quot;dom&quot;, &quot;es6&quot;, &quot;dom.iterable&quot;, &quot;scripthost&quot;]</span></span><br><span class=\"line\"><span class=\"attr\">&quot;allowJS&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 允许编译器编译JS，JSX文件</span></span><br><span class=\"line\"><span class=\"attr\">&quot;checkJs&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 允许在JS文件中报错，通常与allowJS一起使用</span></span><br><span class=\"line\"><span class=\"attr\">&quot;outDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./dist&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 指定输出目录</span></span><br><span class=\"line\"><span class=\"attr\">&quot;rootDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 指定输出文件目录(用于输出)，用于控制输出目录结构</span></span><br><span class=\"line\"><span class=\"attr\">&quot;declaration&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 生成声明文件，开启后会自动生成声明文件</span></span><br><span class=\"line\"><span class=\"attr\">&quot;declarationDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./file&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 指定生成声明文件存放目录</span></span><br><span class=\"line\"><span class=\"attr\">&quot;emitDeclarationOnly&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 只生成声明文件，而不会生成js文件</span></span><br><span class=\"line\"><span class=\"attr\">&quot;sourceMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 生成目标文件的sourceMap文件</span></span><br><span class=\"line\"><span class=\"attr\">&quot;inlineSourceMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 生成目标文件的inline SourceMap，//inline SourceMap会包含在生成的js文件中</span></span><br><span class=\"line\"><span class=\"attr\">&quot;declarationMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 为声明文件生成sourceMap</span></span><br><span class=\"line\"><span class=\"attr\">&quot;typeRoots&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 声明文件目录，默认时node_modules/@types</span></span><br><span class=\"line\"><span class=\"attr\">&quot;types&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 加载的声明文件包</span></span><br><span class=\"line\">              <span class=\"comment\">//如果指定了某个值， 她会在 typeRoots 下找这个包，找到了就只加载这个包</span></span><br><span class=\"line\"><span class=\"attr\">&quot;removeComments&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 删除注释 </span></span><br><span class=\"line\"><span class=\"attr\">&quot;noEmit&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 不输出文件,即编译后不会生成任何js文件</span></span><br><span class=\"line\"><span class=\"attr\">&quot;noEmitOnError&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 发送错误时不输出任何文件</span></span><br><span class=\"line\"><span class=\"attr\">&quot;noEmitHelpers&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用</span></span><br><span class=\"line\"><span class=\"attr\">&quot;importHelpers&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 通过tslib引入helper函数，文件必须是模块</span></span><br><span class=\"line\"><span class=\"attr\">&quot;downlevelIteration&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现</span></span><br><span class=\"line\"><span class=\"attr\">&quot;strict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 开启所有严格的类型检查</span></span><br><span class=\"line\"><span class=\"attr\">&quot;alwaysStrict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 在代码中注入&#x27;use strict&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;noImplicitAny&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 不允许隐式的any类型</span></span><br><span class=\"line\"><span class=\"attr\">&quot;strictNullChecks&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 不允许把null、undefined赋值给其他类型的变量</span></span><br><span class=\"line\"><span class=\"attr\">&quot;strictFunctionTypes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 不允许函数参数双向协变</span></span><br><span class=\"line\"><span class=\"attr\">&quot;strictPropertyInitialization&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 类的实例属性必须初始化</span></span><br><span class=\"line\"><span class=\"attr\">&quot;strictBindCallApply&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 严格的bind/call/apply检查</span></span><br><span class=\"line\"><span class=\"attr\">&quot;noImplicitThis&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 不允许this有隐式的any类型</span></span><br><span class=\"line\"><span class=\"attr\">&quot;noUnusedLocals&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 检查只声明、未使用的局部变量(只提示不报错)</span></span><br><span class=\"line\"><span class=\"attr\">&quot;noUnusedParameters&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 检查未使用的函数参数(只提示不报错)</span></span><br><span class=\"line\"><span class=\"attr\">&quot;noFallthroughCasesInSwitch&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 防止switch语句贯穿(即如果没有break语句后面不会执行)</span></span><br><span class=\"line\"><span class=\"attr\">&quot;noImplicitReturns&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">//每个分支都会有返回值</span></span><br><span class=\"line\"><span class=\"attr\">&quot;esModuleInterop&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 允许export=导出，由import from 导入</span></span><br><span class=\"line\"><span class=\"attr\">&quot;allowUmdGlobalAccess&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 允许在模块中全局变量的方式访问umd模块</span></span><br><span class=\"line\"><span class=\"attr\">&quot;moduleResolution&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 模块解析策略，ts默认用node的解析策略，即相对的方式导入</span></span><br><span class=\"line\"><span class=\"attr\">&quot;baseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 解析非相对模块的基地址，默认是当前目录</span></span><br><span class=\"line\"><span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 路径映射，相对于baseUrl</span></span><br><span class=\"line\">    <span class=\"comment\">// 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置</span></span><br><span class=\"line\">   <span class=\"attr\">&quot;jquery&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;rootDirs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;out&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 将多个目录放在一个虚拟目录下，用于运行时，</span></span><br><span class=\"line\">                          <span class=\"comment\">//即编译后引入文件的位置可能发生变化，</span></span><br><span class=\"line\">                          <span class=\"comment\">//这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错</span></span><br><span class=\"line\"><span class=\"attr\">&quot;listEmittedFiles&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 打印输出文件</span></span><br><span class=\"line\"><span class=\"attr\">&quot;listFiles&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span> <span class=\"punctuation\">,</span> <span class=\"comment\">// 打印编译的文件(包括引用的声明文件)</span></span><br><span class=\"line\"><span class=\"attr\">&quot;jsx&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Preserve&quot;</span>   <span class=\"comment\">//在 .tsx 中支持 JSX ：React 或 Preserve</span></span><br><span class=\"line\"><span class=\"attr\">&quot;jsxFactory&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;&quot;</span>   <span class=\"comment\">//默认值 React.createElement\t。  jsx 设置为 React 时使用的创建函数</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"typescript-中-const-和-readonly-的区别枚举和常量枚举的区别接口和类型别名的区别\"><a class=\"anchor\" href=\"#typescript-中-const-和-readonly-的区别枚举和常量枚举的区别接口和类型别名的区别\">#</a> <strong>TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？</strong></h1>\n<p><code>const 和 readonly</code> : const 可以防止变量的值被修改，readonly 关键字用于定义类中的只读属性。只读属性只能在声明时或构造函数中进行赋值，后续不能对其进行修改。</p>\n<p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span> = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable constant_\">PI</span>); <span class=\"comment\">// 输出: 3.14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable constant_\">PI</span> = <span class=\"number\">3.14159</span>; <span class=\"comment\">// 报错: &quot;Cannot assign to &#x27;PI&#x27; because it is a constant.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">changeName</span>(<span class=\"params\">newName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = newName; <span class=\"comment\">// 报错: &quot;Cannot assign to &#x27;name&#x27; because it is a read-only property.&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;Alice&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>); <span class=\"comment\">// 输出: &quot;Alice&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Bob&#x27;</span>; <span class=\"comment\">// 报错: &quot;Cannot assign to &#x27;name&#x27; because it is a read-only property.&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><code>枚举和常量枚举</code> ：常量枚举只能使用常量枚举表达式，并且不同于常规的枚举，它们在编译阶段会被删除。 常量枚举成员在使用的地方会被内联进来。 之所以可以这么做是因为，常量枚举不允许包含计算成员。<br />\n <code>接口和类型别名</code> ：两者都可以用来描述对象或函数的类型。相同点：<br />\n\\1. 都可以描述 ' 对象 ' 或者 ' 函数'<br />\n\\2. 都允许拓展 (extends)</p>\n<p>不同点：<br />\n\\1. type 可以声明基本类型，联合类型，元组<br />\n \\2. type 可以使用 typeof 获取实例的类型进行赋值<br />\n \\3. 多个相同的 interface 声明可以自动合并</p>\n<p>与接口不同，类型别名还可以用于其他类型，如基本类型（原始值）、联合类型、元组。接口可用来实现，某个类可以实现接口，实现接口中所有的抽象类和方法</p>\n<h1 id=\"typescript-中-interface-可以给-function-array-classindexable做声明\"><a class=\"anchor\" href=\"#typescript-中-interface-可以给-function-array-classindexable做声明\">#</a> TypeScript 中 interface 可以给 Function / Array / Class（Indexable）做声明</h1>\n<p>可以声明函数，数组，类</p>\n<blockquote>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 可以 */</span></span><br><span class=\"line\"><span class=\"comment\">// 函数声明</span></span><br><span class=\"line\">interface <span class=\"title class_\">Say</span> &#123;</span><br><span class=\"line\"> (<span class=\"attr\">name</span>: string): viod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">say</span>: <span class=\"title class_\">Say</span> = (<span class=\"attr\">name</span>: string):<span class=\"function\"><span class=\"params\">viod</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// Array 声明</span></span><br><span class=\"line\">interface <span class=\"title class_\">NumberArray</span> &#123; </span><br><span class=\"line\"> [<span class=\"attr\">index</span>: number]: number; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>: <span class=\"title class_\">NumberArray</span> = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">// Class 声明</span></span><br><span class=\"line\">interface <span class=\"title class_\">PersonalIntl</span> &#123;</span><br><span class=\"line\"> <span class=\"attr\">name</span>: string</span><br><span class=\"line\"> sayHi (<span class=\"attr\">name</span>: string): string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"typescript-如何设计-class-的声明\"><a class=\"anchor\" href=\"#typescript-如何设计-class-的声明\">#</a> TypeScript 如何设计 Class 的声明？</h1>\n<p>在类中声明属性或方法，使用 constructor 构造函数赋予初值</p>\n<blockquote>\n<p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span> &#123;</span><br><span class=\"line\">   <span class=\"attr\">greeting</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">   <span class=\"title function_\">constructor</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span> = message;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">greet</span>(): <span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter = <span class=\"keyword\">new</span> <span class=\"title class_\">Greeter</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 在声明类的时候，一般类中都会包含，构造函数、对构造函数中的属性进行类型声明、类中的方法。</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"typescript-中如何设置模块导入的路径别名\"><a class=\"anchor\" href=\"#typescript-中如何设置模块导入的路径别名\">#</a> TypeScript 中如何设置模块导入的路径别名？</h1>\n<blockquote>\n<p>通过 tsconfig.json 中的 paths 项来配置:</p>\n<p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> </span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;baseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;.&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">         <span class=\"attr\">&quot;@helper/*&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src/helper/*&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">         <span class=\"attr\">&quot;@utils/*&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src/utils/*&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">         ... </span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span> </span><br><span class=\"line\">   <span class=\"punctuation\">&#125;</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"对-typescript-类中成员的-public-private-protected-readonly-修饰符的理解\"><a class=\"anchor\" href=\"#对-typescript-类中成员的-public-private-protected-readonly-修饰符的理解\">#</a> 对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？</h1>\n<blockquote>\n<p><code>public</code> : 成员都默认为 <code>public</code> ，被此限定符修饰的成员是可以被外部访问；<br />\n <code>private</code> : 被此限定符修饰的成员是只可以被类的内部访问；<br />\n <code>protected</code> : 被此限定符修饰的成员是只可以被类的内部以及类的子类访问；<br />\n <code>readonly</code> : 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p>\n</blockquote>\n<h1 id=\"数组定义的两种方式\"><a class=\"anchor\" href=\"#数组定义的两种方式\">#</a> 数组定义的两种方式</h1>\n<blockquote>\n<p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span>= <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Bar</span> &#123; </span><br><span class=\"line\">     <span class=\"attr\">baz</span>: <span class=\"title class_\">Array</span>&lt;&#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>&#125;&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Foo</span> = <span class=\"built_in\">string</span>[];</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Bar</span> &#123; </span><br><span class=\"line\">     baz : &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">age</span>: <span class=\"built_in\">number</span> &#125;[] </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"ts中的泛型是什么\"><a class=\"anchor\" href=\"#ts中的泛型是什么\">#</a> TS 中的泛型是什么？</h1>\n<p>泛型允许我们在编写代码时使用一些以后才指定的类型，在定义函数，接口或者类的时候，不预先定义好具体的类型，而在使用的时候在指定类型的一种特性。</p>\n<p>any 和泛型的区别？</p>\n<p>泛型有类型推论，编译器会根据传入的参数自动地帮助我们确定 T 的类型</p>\n<p>any 则是不检验</p>\n<h1 id=\"类的静态成员\"><a class=\"anchor\" href=\"#类的静态成员\">#</a> 类的静态成员</h1>\n<p>在 TypeScript 中，类可以拥有静态成员，它们属于类本身，而不是属于类的实例。静态成员可以通过  <code>static</code>  关键字来定义。下面是一个使用静态成员的例子：</p>\n<p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Calculator</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">PI</span>: <span class=\"built_in\">number</span> = <span class=\"number\">3.1415926</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">add</span>(<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">subtract</span>(<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Calculator</span>.<span class=\"property\">PI</span>); <span class=\"comment\">// 输出：3.1415926</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Calculator</span>.<span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 输出：3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Calculator</span>.<span class=\"title function_\">subtract</span>(<span class=\"number\">4</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 输出：2</span></span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们定义了一个  <code>Calculator</code>  类，它有一个静态属性  <code>PI</code>  和两个静态方法  <code>add</code>  和  <code>subtract</code> 。这些成员可以在任何地方被调用，无需创建  <code>Calculator</code>  类的实例。</p>\n<h1 id=\"简单介绍一下-typescript-模块的加载机制\"><a class=\"anchor\" href=\"#简单介绍一下-typescript-模块的加载机制\">#</a> 简单介绍一下 TypeScript 模块的加载机制？</h1>\n<p>假设有一个导入语句  <code>import &#123; a &#125; from &quot;moduleA&quot;</code> ;</p>\n<ol>\n<li>首先，编译器会尝试定位需要导入的模块文件，通过绝对或者相对的路径查找方式；</li>\n<li>如果上面的解析失败了，没有查找到对应的模块，编译器会尝试定位一个 <code>外部模块声明</code> （.d.ts）；</li>\n<li>最后，如果编译器还是不能解析这个模块，则会抛出一个错误  <code>error TS2307: Cannot find module 'moduleA'.</code></li>\n</ol>\n",
            "tags": [
                "学习，ts"
            ]
        }
    ]
}